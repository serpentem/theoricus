// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  theoricus.commands.Compiler = (function() {
    var ArrayUtil, FnUtil, Toaster, fs, fsu, jade, nib, path, stylus, _ref;

    path = require("path");

    fs = require("fs");

    nib = require("nib");

    fsu = require('fs-util');

    jade = require("jade");

    stylus = require("stylus");

    Toaster = require('coffee-toaster').Toaster;

    _ref = require('coffee-toaster').toaster.utils, FnUtil = _ref.FnUtil, ArrayUtil = _ref.ArrayUtil;

    Compiler.prototype.BASE_DIR = "";

    Compiler.prototype.APP_FOLDER = "";

    function Compiler(the, watch) {
      var fsw_config, fsw_static,
        _this = this;
      this.the = the;
      if (watch == null) {
        watch = false;
      }
      this._on_jade_stylus_change = __bind(this._on_jade_stylus_change, this);

      this.BASE_DIR = this.the.pwd;
      this.APP_FOLDER = "" + this.BASE_DIR + "/app";
      this.toaster = new Toaster(this.BASE_DIR, watch ? {
        w: true
      } : {
        c: true
      });
      this.toaster.before_build = function() {
        _this.compile();
        return false;
      };
      this.compile();
      if (!watch) {
        return;
      }
      fsw_static = fsu.watch("" + this.APP_FOLDER + "/static", /(.jade|.styl)$/m);
      fsw_static.on('create', FnUtil.proxy(this._on_jade_stylus_change, 'create'));
      fsw_static.on('update', FnUtil.proxy(this._on_jade_stylus_change, 'update'));
      fsw_static.on('delete', FnUtil.proxy(this._on_jade_stylus_change, 'delete'));
      fsw_config = fsu.watch("" + this.APP_FOLDER + "/static", /(.coffee)$/m);
      fsw_config.on('update', FnUtil.proxy(this._on_jade_stylus_change, 'update'));
    }

    Compiler.prototype._on_jade_stylus_change = function(ev, f) {
      var msg, now, type,
        _this = this;
      if (f.type === "dir" && ev === "created") {
        return;
      }
      now = (("" + (new Date)).match(/[0-9]{2}\:[0-9]{2}\:[0-9]{2}/))[0];
      switch (ev) {
        case "created":
          msg = "New file created".bold.cyan;
          console.log(("[" + now + "] " + msg + " " + info.path).green);
          break;
        case "deleted":
          type = info.type === "file" ? "File" : "Folder";
          msg = ("" + type + " deleted").bold.red;
          console.log(("[" + now + "] {msg} " + info.path).red);
          break;
        case "updated":
          msg = "File changed".bold.cyan;
          console.log(("[" + now + "] " + msg + " " + info.path).cyan);
      }
      if ((info.path.match(/.jade$/m)) || (info.path.match(/.coffee$/m))) {
        this.compile();
      }
      if (info.path.match(/.styl$/m)) {
        return this.compile_stylus(function(css) {
          var target;
          target = "" + _this.the.pwd + "/public/app.css";
          fs.writeFileSync(target, css);
          return console.log(("[" + now + "] " + 'Compiled'.bold + " " + target).green);
        });
      }
    };

    Compiler.prototype.compile_jade = function(after_compile) {
      var buffer, compiled, file, files, name, output, source, _i, _len;
      files = fsu.find("" + this.APP_FOLDER + "/static", /.jade$/);
      output = "(function() {\n	app.templates = { ~TEMPLATES };\n}).call( this );";
      buffer = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (/^_/m.test(file)) {
          continue;
        }
        name = (file.match(/static\/(.*).jade$/m))[1];
        source = fs.readFileSync(file, "utf-8");
        compiled = jade.compile(source, {
          filename: file,
          client: true,
          compileDebug: false
        });
        compiled = compiled.toString().replace("anonymous", "");
        buffer.push(("'" + name + "': ") + compiled);
      }
      output = output.replace("~TEMPLATES", buffer.join(","));
      output = this.to_single_line(output);
      return "// TEMPLATES\n" + output;
    };

    Compiler.prototype.compile_stylus = function(after_compile) {
      var buffer, file, files, paths, source, _i, _j, _len, _len1, _results,
        _this = this;
      files = fsu.find("" + this.APP_FOLDER + "/static", /.styl$/);
      buffer = [];
      this.pending_stylus = 0;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.match(/(\_)?[^\/]+$/)[1] !== "_") {
          this.pending_stylus++;
        }
      }
      _results = [];
      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
        file = files[_j];
        if (file.match(/(\_)?[^\/]+$/)[1] === "_") {
          continue;
        }
        source = fs.readFileSync(file, "utf-8");
        paths = ["" + this.APP_FOLDER + "/static/_mixins/stylus"];
        _results.push(stylus(source).set('filename', file).set('paths', paths).use(nib())["import"]('nib').render(function(err, css) {
          if (err != null) {
            throw err;
          }
          buffer.push(css);
          if (--_this.pending_stylus === 0) {
            return after_compile(buffer.join("\n"));
          }
        }));
      }
      return _results;
    };

    Compiler.prototype.compile = function() {
      var conf, footer, header, now, templates,
        _this = this;
      conf = this._get_config();
      templates = this.compile_jade();
      header = "" + templates + "\n\n" + conf.config + "\n\n" + conf.routes + "\n\n" + conf.root + "\n";
      footer = "";
      this.toaster.build(header, footer);
      now = (("" + (new Date)).match(/[0-9]{2}\:[0-9]{2}\:[0-9]{2}/))[0];
      return this.compile_stylus(function(css) {
        var target;
        target = "" + _this.the.pwd + "/public/app.css";
        fs.writeFileSync(target, css);
        return console.log(("[" + now + "] " + 'Compiled'.bold + " " + target).green);
      });
    };

    Compiler.prototype._get_config = function() {
      var app, routes;
      app = "" + this.the.pwd + "/config/app.coffee";
      routes = "" + this.the.pwd + "/config/routes.coffee";
      app = fs.readFileSync(app, "utf-8");
      routes = fs.readFileSync(routes, "utf-8");
      return new theoricus.commands.Config(app, routes);
    };

    Compiler.prototype.to_single_line = function(code) {
      return theoricus.commands.Compiler.to_single_line(code);
    };

    Compiler.to_single_line = function(code, ugli) {
      return code.replace(/(^\/\/.*)|([\t\n]+)/gm, "");
    };

    return Compiler;

  })();

  theoricus.commands.Config = (function() {
    var Compiler, cs, fs;

    Compiler = theoricus.commands.Compiler;

    fs = require("fs");

    cs = require("coffee-script");

    Config.prototype.config = null;

    Config.prototype.routes = null;

    Config.prototype.root = null;

    function Config(app, routes) {
      this._parse_app(app);
      this._parse_routes(routes);
    }

    Config.prototype._parse_app = function(app) {
      var tmp;
      try {
        tmp = {};
        app = cs.compile(app.replace(/(^\w)/gm, "tmp.$1"), {
          bare: 1
        });
        eval(app);
      } catch (error) {
        throw error;
      }
      return this.config = "// CONFIG\n" + Compiler.to_single_line("(function() {\n	app.config = {\n		animate_at_startup: " + tmp.animate_at_startup + ",\n		enable_auto_transitions: " + tmp.enable_auto_transitions + "\n	};\n}).call( this );");
    };

    Config.prototype._parse_routes = function(routes) {
      var buffer, root, tmp;
      buffer = [];
      root = null;
      try {
        tmp = {
          root: function(route) {
            return root = route;
          },
          match: function(route, options) {
            route = "'" + route + "': {\n	to: '" + options.to + "',\n	at: '" + options.at + "',\n	el: '" + options.el + "'\n}";
            return buffer.push(route.replace("'null'", null));
          }
        };
        routes = cs.compile(routes.replace(/(^\w)/gm, "tmp.$1"), {
          bare: 1
        });
        eval(routes);
      } catch (error) {
        throw error;
      }
      this.root = "// ROOT\n" + Compiler.to_single_line("(function() {\n	app.root = '" + root + "';\n\n}).call( this );", true);
      return this.routes = "// ROUTES\n" + Compiler.to_single_line("(function() {\n	app.routes = {\n		" + (buffer.join(",")) + "\n	};\n}).call( this );", true);
    };

    return Config;

  })();

}).call(this);
