// Generated by CoffeeScript 1.6.2
(function() {
  var Rm, fs, fsu, path;

  fs = require('fs');

  path = require('path');

  fsu = require("fs-util");

  module.exports = Rm = (function() {
    function Rm(the, cli) {
      var error_msg, name, type;

      this.the = the;
      this.cli = cli;
      if (!this.the.is_theoricus_app()) {
        return;
      }
      type = this.cli.argv.destroy;
      name = this.cli.argv._[0];
      this.SRC = "" + this.the.pwd + "/src";
      this.APP_FOLDER = "" + this.SRC + "/app";
      this.TEMPLATES_FOLDER = "" + this.SRC + "/templates";
      this.STYLES_FOLDER = "" + this.SRC + "/styles";
      if (this[type] == null) {
        error_msg = "Valid options: controller, model, view, mvc.";
        throw new Error(error_msg);
      }
      this[type](name);
    }

    Rm.prototype.mvc = function(name) {
      this.model(name.singularize());
      this.view("" + name + "/index");
      return this.controller(name);
    };

    Rm.prototype.model = function(name) {
      return this.rm("" + this.APP_FOLDER + "/models/" + name + ".coffee");
    };

    Rm.prototype.view = function(path) {
      var error_msg, folder, name, parts;

      folder = (parts = path.split('/'))[0];
      name = parts[1];
      if (!((name != null) || this.cli.argv.rf)) {
        error_msg = "Views should be removed with path-style notation.\n\n\ti.e.:\n\t\t theoricus rm view person/index\n\t\t theoricus rm view user/list\n";
        throw new Error(error_msg);
        return;
      }
      if (this.cli.argv.rf) {
        this.rm("" + this.APP_FOLDER + "/views/" + folder);
        this.rm("" + this.STYLES_FOLDER + "/" + folder);
        return this.rm("" + this.TEMPLATES_FOLDER + "/" + folder);
      } else {
        this.rm("" + this.APP_FOLDER + "/views/" + folder + "/" + name + ".coffee");
        this.rm("" + this.TEMPLATES_FOLDER + "/" + folder + "/" + name + ".jade");
        return this.rm("" + this.STYLES_FOLDER + "/" + folder + "/" + name + ".styl");
      }
    };

    Rm.prototype.controller = function(name, args, mvc) {
      if (mvc == null) {
        mvc = false;
      }
      return this.rm("" + this.APP_FOLDER + "/controllers/" + name + ".coffee");
    };

    Rm.prototype.rm = function(filepath) {
      var err;

      if (fs.existsSync(filepath)) {
        try {
          if (fs.lstatSync(filepath).isDirectory()) {
            if (this.cli.argv.rf) {
              fsu.rm_rf(filepath);
            } else {
              fs.rmDirSync(filepath);
            }
          } else {
            fs.unlinkSync(filepath);
          }
        } catch (_error) {
          err = _error;
          throw new Error(err);
        }
        return console.log(("" + 'Removed'.bold + " " + filepath).red);
      } else {
        return console.log(("" + 'Not found'.bold + " " + filepath).yellow);
      }
    };

    return Rm;

  })();

}).call(this);

/*
//@ sourceMappingURL=rm.map
*/
