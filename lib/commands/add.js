// Generated by CoffeeScript 1.6.2
(function() {
  var Add, Controller, Model, Question, View,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = require('../generators/model');

  Controller = require('../generators/controller');

  View = require('../generators/view');

  Question = require('../generators/question');

  module.exports = Add = (function(_super) {
    __extends(Add, _super);

    function Add(the, cli) {
      this.the = the;
      this.cli = cli;
      if (!this.the.is_theoricus_app()) {
        return;
      }
      this.create();
    }

    Add.prototype.create = function() {
      var error_msg, f, name, q, type,
        _this = this;

      if (this.cli.argv.generate === true) {
        q = "Which you would like to create? [model|view|controller|mvc] : ";
        f = /(model|view|controller|mvc)/;
        return this.ask(q, f, function(type) {
          _this.cli.argv.generate = type;
          return _this.create();
        });
      }
      type = this.cli.argv.generate;
      if (this[type] == null) {
        error_msg = "Valid options: controller, model, view, mvc.";
        throw new Error(error_msg);
      }
      name = this.cli.argv._[0];
      if (name == null) {
        q = "Please give it a name : ";
        f = /([^\s]*)/;
        return this.ask(q, f, function(name) {
          _this.cli.argv._ = [name];
          return _this.create();
        });
      }
      return this[type](name);
    };

    Add.prototype.mvc = function(name) {
      this.model(name.singularize());
      this.view("" + name + "/index");
      return this.controller(name);
    };

    Add.prototype.model = function(name) {
      return new Model(this.the, name, this.cli);
    };

    Add.prototype.view = function(path) {
      var error_msg, folder, name, parts;

      folder = (parts = path.split('/'))[0];
      name = parts[1];
      if (name == null) {
        error_msg = "Views should be added with path-style notation.\n\n\ti.e.:\n\t\t theoricus add view person/index\n\t\t theoricus add view user/list\n";
        throw new Error(error_msg);
        return;
      }
      return new View(this.the, name, folder, false, this.cli);
    };

    Add.prototype.controller = function(name) {
      return new Controller(this.the, name, this.cli);
    };

    return Add;

  })(Question);

}).call(this);

/*
//@ sourceMappingURL=add.map
*/
